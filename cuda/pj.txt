%%cu
#include<bits/stdc++.h>
#include<chrono>

# define LIST_LENGTH 1024

using namespace std;

chrono::time_point<chrono::system_clock> startTime, endTime;


__global__ void calc_dist(int *next, int *dist, int *nextCopy, int *distCopy){
    int index = threadIdx.x;
    while(next[index]!=0){
      distCopy[index] = dist[index] + dist[next[index]];
      nextCopy[index] = next[next[index]];
      __syncthreads();
      dist[index] = distCopy[index];
      next[index] = nextCopy[index];
      __syncthreads();
    }
}

__global__ void initialize_dist(int *next, int *dist){
    int i=threadIdx.x;
    if(next[i] != 0){
        dist[i] = 1;
    }
    else{
        dist[i] = 0;
    }
}

void initialize_next(int *next, int length){
    for(int i=0;i<length;i++){
        next[i] = i+1;
    }
    next[length-1] = 0; 
}


void startTimer()
{
    startTime = chrono::system_clock::now();
}

double stopTimer()
{
    endTime = chrono::system_clock::now();
    chrono::duration<double> elapsedSeconds = endTime - startTime;
    return elapsedSeconds.count();
}



int main(){
    int *original_l, *next_l;
    int *next, *dist, *nextCopy, *distCopy;
    int size_p = LIST_LENGTH * sizeof(int);

    original_l = (int *)malloc(size_p);
    next_l = (int *)malloc(size_p);

    cudaMalloc(&next, size_p);
    cudaMalloc(&dist, size_p);
    cudaMalloc(&nextCopy, size_p);
    cudaMalloc(&distCopy, size_p);

    initialize_next(next_l, LIST_LENGTH);

    cudaMemcpy(next, next_l, size_p, cudaMemcpyHostToDevice);
    cudaMemcpy(dist, original_l, size_p, cudaMemcpyHostToDevice);
    
    startTimer();
    initialize_dist<<<1, LIST_LENGTH>>> (next, dist);
    calc_dist<<<1, LIST_LENGTH>>> (next, dist, nextCopy, distCopy);
    double time_elapsed = stopTimer();
    cout<<time_elapsed<<endl;

    cudaMemcpy(original_l, dist, size_p, cudaMemcpyDeviceToHost);
    for(int i=0;i<LIST_LENGTH;i++){
        cout<<original_l[i]<<endl;
    }

}

